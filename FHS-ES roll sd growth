library(quantmod)
library(tidyverse)
library(rugarch)
library(lubridate)
library(PerformanceAnalytics)
library(roll)
library(magrittr)





#ES by HS- function
HS.ES <- function(asset, p = 0.99, start=as.Date("2000-01-01"), end = today(), method = "historical"){
  prices <- NULL
  returns <- NULL
  tryCatch({prices <- getSymbols(asset, from = start, to = end,  auto.assign = F)
  returns <- prices[,6] %>% log() %>% diff() %>% na.omit() %>% ts()}
  ,error = function(e){NULL})
  if (is.null(returns)){
    if(is_tibble(asset) | is.data.frame(asset)){
      tryCatch( {
        for (j in 1:ncol(asset)){
          if (is.Date(as.data.frame(asset)[ ,j]) == TRUE){
            asset %<>% rename_at(j,~"date")
            break()
          }
        }
        returns <- asset %>% select(date, which(sapply(., class) == "numeric")) %>% select(1, 2)
        returns <- as.xts(returns[ ,-1], order.by = asset[ ,1])
      }, error = function(e){cat("Couldnt find the date column or value column/n")})
      
    } else {
      cat("Give tibble or dataframe with date column") 
    }
  }
  HS_es <- ES(returns, p = p, method = method)
  return(-HS_es)
}







FHS.ES <- function(asset, q = 0.01, predsteps = 1, simtimes = 20000,
                   variancemodel = "gjr", start = today() - months(30), end = today()) {
  
  prices <- NULL
  returns <- NULL
  tryCatch({prices <- getSymbols(asset, from = start, to = end,  auto.assign = F)
  returns <- prices[,6] %>% log() %>% diff() %>% na.omit() %>% ts()}
  ,error = function(e){NULL})
  if (is.null(returns)){
    if(is_tibble(asset) | is.data.frame(asset)){
      tryCatch( {
        for (j in 1:ncol(asset)){
          if (is.Date(as.data.frame(asset)[ ,j]) == TRUE){
            asset %<>% rename_at(j,~"date")
            break()
          }
        }
        returns <- asset %>% select(date, which(sapply(., class) == "numeric")) %>% select(1, 2)
        returns <- as.xts(returns[ ,-1], order.by = asset[ ,1])
      }, error = function(e){cat("Couldnt find the date column or value column/n")})
      
    } else {
      cat("Give tibble or dataframe with date column") 
    }
  }
  

  #MEAN-MODEL
  #meanmodel <- arima(returns, order = c(3,0,0), method = "ML")

  #VARIANCE-MODEL
  if (variancemodel == "garch"){
    #garch:
    garch.spec <-  ugarchspec(mean.model = list(armaOrder = c(1,0)),
                              variance.model = list(garchOrder = c(1,1), model = "sGARCH"), distribution.model = "norm")                                               
    m1 <- ugarchfit(spec = garch.spec, data = returns)
    #Estimated parameters
    mu = m1@fit$coef[1]
    w = max(0, m1@fit$coef[3])
    beta = max(0, m1@fit$coef[5])
    alpha = max(0, m1@fit$coef[4])
    gamma = 0
  } else if (variancemodel == "gjr"){
    #gjr-garch:  
    asd_spec <-  ugarchspec(variance.model=list(model="gjrGARCH",garchOrder=c(1,1)),mean.model=list(armaOrder=c(1,0)),distribution.model="sstd")
    setbounds(asd_spec)<-list(alpha1=c(0,1))
    m1 <- ugarchfit(spec=asd_spec, data = returns, solver="hybrid")
    #Estimated parameters
    mu = m1@fit$coef[1]
    w = max(0, m1@fit$coef[3])
    beta = max(0, m1@fit$coef[5])
    gamma = max(0, m1@fit$coef[6])
    alpha = max(max(0, gamma), m1@fit$coef[4])
  } else {
      cat("Mistaken model")
  }
  
  #Formating variables (historical)
  a <- NULL
  h <- NULL
  z <- NULL
  
  # Initial values
  a0 <- 0              #residual
  h0 <- max(0, w/(1-alpha-beta-(gamma/2))) #volatility
  z0 <- 0              #standardized residual
  
  # The first step (history) value of volatility
  indicator <- 1
  h[1] <- w + beta*h0 + alpha*a0^2 + gamma * indicator * a0^2
  
  # Computing historical residuals
  for (i in 1:length(returns)){
    a[i] <- returns[i] - mu
  }
  
  # Computing historical volatility
  for(i in 2:length(returns)){
    if (a[i-1] < 0){indicator <- 1} else {indicator <- 0}
    h[i] <- w + beta*h[i-1] + alpha*(a[i-1])^2 + gamma * indicator * a[i-1]^2
  }
  
  # Computing historical standardized residuals
  for (i in 1:length(returns)){
    z[i] <- a[i]/sqrt(h[i])
  }
  
  # Formating variables (future)
  hx <- NULL
  ax <- NULL
  rx <- NULL
  
  # Initial futures values are same as final historical values
  hx0 <- h[length(h)] # volatility
  ax0 <- a[length(a)] # residuals
  
  p0 <- tail(as.numeric(prices[,6]), n=1) # price at the moment 
  px <- vector("numeric") # simulated returns in the end of the prediction period
  
  # Simulating futures values
  for (j in 1:simtimes){
    zx <- sample(z, predsteps, replace = T)
    
    if (predsteps == 1){
      if (ax0 < 0) {indicator <- 1} else {indicator <- 0}
      hx[1] <- w + beta*hx0 + alpha*(ax0)^2 + gamma * indicator * (ax0)^2
      ax[1] <- zx[1]*sqrt(hx[1])
      px[j] <- ax[1] + mu
      
    } else {
      if (ax0 < 0){
        indicator[1] <- 1 
      }else {indicator[1] <- 0
      }
      hx[1] <- w + beta*hx0 + alpha*(ax0)^2 + gamma * indicator[1] * (ax0)^2
      ax[1] <- zx[1]*sqrt(hx[1])
      
      for(i in 2:predsteps){
        indicator[i] <- ifelse(ax[i-1] < 0, 1,0)
        #if (ax[i-1] < 0){indicator[i] <- 1} else {indicator[i] <- 0}
        hx[i] <- w + beta*hx[i-1] + alpha*ax[i-1]^2 + gamma * indicator[i] * ax[i-1]^2
        ax[i] <- zx[i]*sqrt(hx[i])
      }
      
      for (i in 1:predsteps){    
        rx[i] <- ax[i] + mu      # predicted one step returns of one simulation round
      }
      
      px[j] <- exp(sum(rx))-1  # simulated cumulative returns over prediction period
    }
  }
  
  # Predicted cumulative returns over a prediction period in increasing order
  sortedpx <- sort(px, decreasing = F)
  
  #Value at Risk
  VaR <- -sortedpx[q * simtimes]   # VaR of return
  VaR
  
  dollarVaR <- VaR*p0             # VaR of price  
  dollarVaR
  
  #Expected Shortfall
  ES <- -(1/(q * simtimes)) * sum(sortedpx[1:(q * simtimes)])  # ES of return
  ES                                                   
  
  dollarES <- ES * p0                                         # ES of price
  dollarES
  
  estimates <- list(VaR, dollarVaR, ES, dollarES)
  names(estimates) <- c("VaR", "dollarVaR", "ES", "dollarES")
  return(estimates)
  
}




#start= "2010-01-01"; end = today()
asset <- getSymbols("SPY", from = start, to = end,  auto.assign = F)[ ,6]
asset <- data.frame(date=index(asset), coredata(asset))


assets <- #list of assets

out <- NULL
for (asset in assets){
  begin <- as.Date("2010-07-15")
  relation <- NULL
  for (i in 1:30){
    date <- begin %m+% months(i)
    relation[i] <- FHS.ES(asset = paste0(asset), variancemodel = "gjr", predsteps = 1, start = date %m-% months(10), end = date)[[3]] /
      HS.ES(asset = paste0(asset), p = 0.99, start = date %m-% months(10), end = date) %>% unname() %>% ts()
  }
  x <- roll_sd(as.matrix(relation), 4) %>% log() %>% na.omit()

  dispersion_growth <- exp(diff(x, lag = nrow(x)-1))
  out <- append(out, dispersion_growth)

}
